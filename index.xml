<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Miguel Rodrigues</title><link>https://joserodrigues443.github.io/</link><atom:link href="https://joserodrigues443.github.io/index.xml" rel="self" type="application/rss+xml"/><description>Miguel Rodrigues</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Copyright Â© 2022</copyright><lastBuildDate>Fri, 14 Jan 2022 00:00:00 +0000</lastBuildDate><image><url>https://joserodrigues443.github.io/media/icon_hueb4822ce06564afc741e817af2e2aac7_25000_512x512_fill_lanczos_center_3.png</url><title>Miguel Rodrigues</title><link>https://joserodrigues443.github.io/</link></image><item><title>Idea Api in Rust</title><link>https://joserodrigues443.github.io/project/rust-idea/</link><pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/rust-idea/</guid><description/></item><item><title>How to write technical documents in Hugo</title><link>https://joserodrigues443.github.io/post/writing-technical-content/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/post/writing-technical-content/</guid><description>&lt;p>This page uses Hugo, and &lt;a href="https://wowchemy.com/" target="_blank" rel="noopener">Academic&lt;/a> and is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p>
&lt;p>&lt;strong>Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong>&lt;/p>
&lt;p>On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;h3 id="code">Code&lt;/h3>
&lt;p>Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code>highlight&lt;/code> option in your &lt;code>config/_default/params.toml&lt;/code> file.&lt;/p>
&lt;pre>&lt;code>```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-python">import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code>&lt;/pre>
&lt;h4 id="github-gist">GitHub gist&lt;/h4>
&lt;p>By doing &lt;code>{{\&amp;lt; gist USER GIST_ID \&amp;gt;}}&lt;/code>we can show a given gist.&lt;/p>
&lt;p>It would render like:&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/JoseRodrigues443/de8de668ede0f887bf8bd88419943a42.js">&lt;/script>
&lt;h3 id="charts">Charts&lt;/h3>
&lt;p>Academic supports the popular &lt;a href="https://plot.ly/" target="_blank" rel="noopener">Plotly&lt;/a> chart format.&lt;/p>
&lt;p>Save your Plotly JSON in your page folder, for example &lt;code>chart.json&lt;/code>, and then add the &lt;code>{{&amp;lt; chart data=&amp;quot;chart&amp;quot; &amp;gt;}}&lt;/code> shortcode where you would like the chart to appear.&lt;/p>
&lt;p>Demo:&lt;/p>
&lt;div id="chart-761549823" class="chart">&lt;/div>
&lt;script>
(function() {
let a = setInterval( function() {
if ( typeof window.Plotly === 'undefined' ) {
return;
}
clearInterval( a );
Plotly.d3.json("./line-chart.json", function(chart) {
Plotly.plot('chart-761549823', chart.data, chart.layout, {responsive: true});
});
}, 500 );
})();
&lt;/script>
&lt;p>You might also find the &lt;a href="http://plotly-json-editor.getforge.io/" target="_blank" rel="noopener">Plotly JSON Editor&lt;/a> useful.&lt;/p>
&lt;h3 id="math">Math&lt;/h3>
&lt;p>Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code>math&lt;/code> option in your &lt;code>config/_default/params.toml&lt;/code> file.&lt;/p>
&lt;p>Example &lt;strong>inline math&lt;/strong> &lt;code>$\nabla F(\mathbf{x}_{n})$&lt;/code> renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p>
&lt;h3 id="diagrams">Diagrams&lt;/h3>
&lt;p>Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code>diagram&lt;/code> option in your &lt;code>config/_default/params.toml&lt;/code> file or by adding &lt;code>diagram: true&lt;/code> to your page front matter.&lt;/p>
&lt;p>An example &lt;strong>flowchart&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code>&lt;/pre>
&lt;p>An example &lt;strong>sequence diagram&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code>&lt;/pre>
&lt;p>An example &lt;strong>Gantt diagram&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
gantt
section Section
Completed :done, des1, 2014-01-06,2014-01-08
Active :active, des2, 2014-01-07, 3d
Parallel 1 : des3, after des1, 1d
Parallel 2 : des4, after des1, 1d
Parallel 3 : des5, after des3, 1d
Parallel 4 : des6, after des4, 1d
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">gantt
section Section
Completed :done, des1, 2014-01-06,2014-01-08
Active :active, des2, 2014-01-07, 3d
Parallel 1 : des3, after des1, 1d
Parallel 2 : des4, after des1, 1d
Parallel 3 : des5, after des3, 1d
Parallel 4 : des6, after des4, 1d
&lt;/code>&lt;/pre>
&lt;p>An example &lt;strong>class diagram&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
&amp;lt;&amp;lt;service&amp;gt;&amp;gt;
int id
size()
}
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
&amp;lt;&amp;lt;service&amp;gt;&amp;gt;
int id
size()
}
&lt;/code>&lt;/pre>
&lt;p>An example &lt;strong>state diagram&lt;/strong>:&lt;/p>
&lt;pre>&lt;code>```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;pre>&lt;code class="language-mermaid">stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code>&lt;/pre>
&lt;h3 id="todo-lists">Todo lists&lt;/h3>
&lt;p>You can even write your todo lists in Academic too:&lt;/p>
&lt;pre>&lt;code class="language-markdown">- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Write math example&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Write diagram example&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> Do something else&lt;/li>
&lt;/ul>
&lt;h3 id="tables">Tables&lt;/h3>
&lt;p>Represent your data in tables:&lt;/p>
&lt;pre>&lt;code class="language-markdown">| First Header | Second Header |
| ------------- | ------------- |
| Content Cell | Content Cell |
| Content Cell | Content Cell |
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>First Header&lt;/th>
&lt;th>Second Header&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Content Cell&lt;/td>
&lt;td>Content Cell&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Content Cell&lt;/td>
&lt;td>Content Cell&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="callouts">Callouts&lt;/h3>
&lt;p>Academic supports a &lt;a href="https://wowchemy.com/docs/content/writing-markdown-latex/#callouts" target="_blank" rel="noopener">shortcode for callouts&lt;/a>, also referred to as &lt;em>asides&lt;/em>, &lt;em>hints&lt;/em>, or &lt;em>alerts&lt;/em>. By wrapping a paragraph in &lt;code>{{% callout note %}} ... {{% /callout %}}&lt;/code>, it will render as an aside.&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{% callout note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /callout %}}
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
&lt;/div>
&lt;/div>
&lt;h3 id="spoilers">Spoilers&lt;/h3>
&lt;p>Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{&amp;lt; spoiler text=&amp;quot;Click to view the spoiler&amp;quot; &amp;gt;}}
You found me!
{{&amp;lt; /spoiler &amp;gt;}}
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;details class="spoiler " id="spoiler-3">
&lt;summary>Click to view the spoiler&lt;/summary>
&lt;p>You found me!&lt;/p>
&lt;/details>
&lt;h3 id="icons">Icons&lt;/h3>
&lt;p>Academic enables you to use a wide range of &lt;a href="https://sourcethemes.com/academic/docs/page-builder/#icons" target="_blank" rel="noopener">icons from &lt;em>Font Awesome&lt;/em> and &lt;em>Academicons&lt;/em>&lt;/a> in addition to &lt;a href="https://sourcethemes.com/academic/docs/writing-markdown-latex/#emojis" target="_blank" rel="noopener">emojis&lt;/a>.&lt;/p>
&lt;p>Here are some examples using the &lt;code>icon&lt;/code> shortcode to render icons:&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{&amp;lt; icon name=&amp;quot;terminal&amp;quot; pack=&amp;quot;fas&amp;quot; &amp;gt;}} Terminal
{{&amp;lt; icon name=&amp;quot;python&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} Python
{{&amp;lt; icon name=&amp;quot;r-project&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} R
&lt;/code>&lt;/pre>
&lt;p>renders as&lt;/p>
&lt;p>
&lt;i class="fas fa-terminal pr-1 fa-fw">&lt;/i> Terminal&lt;br>
&lt;i class="fab fa-python pr-1 fa-fw">&lt;/i> Python&lt;br>
&lt;i class="fab fa-r-project pr-1 fa-fw">&lt;/i> R&lt;/p>
&lt;h3 id="did-you-find-this-page-helpful-consider-sharing-it-">Did you find this page helpful? Consider sharing it ð&lt;/h3></description></item><item><title>Display Jupyter Notebooks with Hugo</title><link>https://joserodrigues443.github.io/post/jupyter/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/post/jupyter/</guid><description>&lt;pre>&lt;code class="language-python">from IPython.core.display import Image
Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')
&lt;/code>&lt;/pre>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./index_1_0.png" alt="png" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;pre>&lt;code class="language-python">print(&amp;quot;Welcome to Hugo!&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>Welcome to Hugo!
&lt;/code>&lt;/pre>
&lt;h2 id="install-python-and-jupyterlab">Install Python and JupyterLab&lt;/h2>
&lt;p>&lt;a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener">Install Anaconda&lt;/a> which includes Python 3 and JupyterLab.&lt;/p>
&lt;p>Alternatively, install JupyterLab with &lt;code>pip3 install jupyterlab&lt;/code>.&lt;/p>
&lt;h2 id="create-or-upload-a-jupyter-notebook">Create or upload a Jupyter notebook&lt;/h2>
&lt;p>Run the following commands in your Terminal, substituting &lt;code>&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code> and &lt;code>&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code> with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p>
&lt;pre>&lt;code class="language-bash">mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code>&lt;/pre>
&lt;p>The &lt;code>jupyter&lt;/code> command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p>
&lt;h2 id="edit-your-post-metadata">Edit your post metadata&lt;/h2>
&lt;p>The first cell of your Jupyter notebook will contain your post metadata (&lt;a href="https://sourcethemes.com/academic/docs/front-matter/" target="_blank" rel="noopener">front matter&lt;/a>).&lt;/p>
&lt;p>In Jupyter, choose &lt;em>Markdown&lt;/em> as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p>
&lt;pre>&lt;code>---
title: My post's title
date: 2019-09-01
# Put any other Academic metadata here...
---
&lt;/code>&lt;/pre>
&lt;p>Edit the metadata of your post, using the &lt;a href="https://sourcethemes.com/academic/docs/managing-content" target="_blank" rel="noopener">documentation&lt;/a> as a guide to the available options.&lt;/p>
&lt;p>To set a &lt;a href="https://sourcethemes.com/academic/docs/managing-content/#featured-image" target="_blank" rel="noopener">featured image&lt;/a>, place an image named &lt;code>featured&lt;/code> into your post&amp;rsquo;s folder.&lt;/p>
&lt;p>For other tips, such as using math, see the guide on &lt;a href="https://sourcethemes.com/academic/docs/writing-markdown-latex/" target="_blank" rel="noopener">writing content with Academic&lt;/a>.&lt;/p>
&lt;h2 id="convert-notebook-to-markdown">Convert notebook to Markdown&lt;/h2>
&lt;pre>&lt;code class="language-bash">jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code>&lt;/pre>
&lt;h2 id="example">Example&lt;/h2>
&lt;p>This post was created with Jupyter. The original files can be found at &lt;a href="https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter" target="_blank" rel="noopener">https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a>&lt;/p></description></item><item><title>Access control on a NFT Solidity Contract</title><link>https://joserodrigues443.github.io/post/nft-with-access-control/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/post/nft-with-access-control/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#first-what-is-a-nft">First&amp;hellip; What is a NFT?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#how-can-i-create-and-use-a-nft">How can I create and use a NFT?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#why-should-i-secure-it">Why should I secure it?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#show-me-the-code-man">Show me the code man&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#requirements">Requirements&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-a-base-project">Create a base project&lt;/a>&lt;/li>
&lt;li>&lt;a href="#create-the-contracts">Create the contracts&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#implement-role-access-system">Implement Role Access System&lt;/a>&lt;/li>
&lt;li>&lt;a href="#implement-the-nft-contract">Implement the NFT contract&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#how-do-how-i-know-it-works-testing-to-the-rescue">How do how I know it works? Testing to the rescue&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#lets-test">Lets test&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#concluding">Concluding&lt;/a>&lt;/li>
&lt;li>&lt;a href="#license">License&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>This post provides the notion on how to create a NFT that can be deployed and used on multiple blockchain networks by multiple people, but at the same time add a security feature that makes sure that only authorized personal can use the complex features of the NFT.&lt;/p>
&lt;h2 id="first-what-is-a-nft">First&amp;hellip; What is a NFT?&lt;/h2>
&lt;p>A NFT is a Non-fungible token, so its a representation that something that is unique on the blockchain. They can be owned by someone, and no one can alter that ownership without permission (or a transfer).&lt;/p>
&lt;p>It can be anything:&lt;/p>
&lt;ul>
&lt;li>a image&lt;/li>
&lt;li>a video&lt;/li>
&lt;li>a concert ticket&lt;/li>
&lt;li>any legal document that can be signed&lt;/li>
&lt;li>a deed for a house&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./img/what-id-a-nft.jpg" alt="What is a NFT diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="how-can-i-create-and-use-a-nft">How can I create and use a NFT?&lt;/h2>
&lt;p>To first create and use a NFT we need have a base contract, a contract is the set of rules, data store and implementation of the logic that we want to have in our program.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./img/how-to-use-a-nft.jpg" alt="How to use a NFT" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h2 id="why-should-i-secure-it">Why should I secure it?&lt;/h2>
&lt;p>It really depends on the objective of your Contract, if you want a Contract that the community can use freely, don&amp;rsquo;t secure it.&lt;/p>
&lt;p>But imagine that you are a artist, and you have a concert or a gig in the next months. You can sell tickets as unique tokens (NFT&amp;rsquo;s) that after the event are collectible&amp;rsquo;s that can be so so valuable in the future. If the contract is not secure everyone can create your concert NFT, those fakes in the market will decrease how valuable and useful your Tokens are.&lt;/p>
&lt;p>So how can you secure your NFT&amp;rsquo;s? You can create your own security implementation, for example a whitelist where only the users in that whitelist can access the contract features. In the following image you can see how it would work.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./img/whitelist-implementation.jpg" alt="Whitelist implementation" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>The advantage of this implementation is its simplicity, for example you create a list of allowed addresses (user addresses in the blockchain) like this: &lt;code>mapping(address =&amp;gt; bool) whitelist;&lt;/code>. Then you check if the sender of the request is in the whitelist, like this &lt;code>require(whitelist[msg.sender]);&lt;/code>, if the message sender is in the required check does not fail and the transaction is possible.&lt;/p>
&lt;p>But there is a problem with this &amp;ldquo;simple&amp;rdquo; solution&amp;hellip; First everyone has the same access in this whitelist, the artist has the same access as the intern, if we want to have different access level&amp;rsquo;s then a role based system would need to be implemented&lt;/p>
&lt;h2 id="show-me-the-code-man">Show me the code man&lt;/h2>
&lt;p>You can see the entire project &lt;a href="https://github.com/JoseRodrigues443/ownable-nft-contract-solidity" target="_blank" rel="noopener">this repository ð¥ JoseRodrigues443/ownable-nft-contract-solidity&lt;/a> ð¥, but we are going to analyse it step by step.&lt;/p>
&lt;h3 id="requirements">Requirements&lt;/h3>
&lt;ul>
&lt;li>NodeJS (setup &lt;a href="https://nodejs.org/en/" target="_blank" rel="noopener">instruction&amp;rsquo;s here&lt;/a>)&lt;/li>
&lt;li>Hardhat tooling (setup &lt;a href="https://hardhat.org/tutorial/setting-up-the-environment.html" target="_blank" rel="noopener">instruction&amp;rsquo;s here&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h3 id="create-a-base-project">Create a base project&lt;/h3>
&lt;p>There are multiple projects and tools that allow use to compile contracts in solidity, to deploy the contracts and create unit tests that allow us to make sure everything is fine&amp;hellip; Today we are going to use &lt;a href="https://hardhat.org/tutorial/creating-a-new-hardhat-project.html" target="_blank" rel="noopener">HardHat&lt;/a>.&lt;/p>
&lt;pre>&lt;code class="language-bash">
# Setup basic npm project
mkdir project
cd project
npm init
npm install --save-dev hardhat
# Start project, select the typescript option for a type safe language (we are not savages)
npx hardhat
&lt;/code>&lt;/pre>
&lt;h3 id="create-the-contracts">Create the contracts&lt;/h3>
&lt;pre>&lt;code class="language-bash">
# Contract that haves and manages a user and admin Role
touch contracts/RoleControl.sol
# the ERC 721 contract that uses the *RoleControl* contract access control logic
touch contracts/ConcertNFT.sol
&lt;/code>&lt;/pre>
&lt;h4 id="implement-role-access-system">Implement Role Access System&lt;/h4>
&lt;p>We could create our own access control system&amp;hellip; But lets be honest, would that be safe or practical?
Because of that we are going a fully tested and community supported contract called &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/AccessControl.sol" target="_blank" rel="noopener">AccessControl.sol&lt;/a> from &lt;a href="https://github.com/OpenZeppelin" target="_blank" rel="noopener">OpenZeppelin&lt;/a>.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./img/access-control-implementation.jpg" alt="Access Control implementation" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>In solidity we can call the Github solidity file directly, but the link can break in the future, is better to install it locally using &lt;code>npm install @openzeppelin/contracts&lt;/code>.&lt;/p>
&lt;p>Edit the &lt;em>RoleControl.sol&lt;/em> contract:&lt;/p>
&lt;pre>&lt;code class="language-javascript">// SPDX-License-Identifier: GPL3 &amp;lt;-- ADD YOUR LICENSE HERE (MIT; GPL3; etc)
// The version of the Solidity language to use
pragma solidity ^0.8.0;
// Import the OpenZeppelin AccessControl contract
import &amp;quot;@openzeppelin/contracts/access/AccessControl.sol&amp;quot;;
// create a contract that extends the OpenZeppelin AccessControl contract
contract RoleControl is AccessControl {
// We can create as many roles as we want
// We use keccak256 to create a hash that identifies this constant in the contract
bytes32 public constant USER_ROLE = keccak256(&amp;quot;USER&amp;quot;); // hash a USER as a role constant
bytes32 public constant INTERN_ROLE = keccak256(&amp;quot;INTERN&amp;quot;); // hash a INTERN as a role constant
// Constructor of the RoleControl contract
constructor (address root) {
// NOTE: Other DEFAULT_ADMIN's can remove other admins, give this role with great care
_setupRole(DEFAULT_ADMIN_ROLE, root); // The creator of the contract is the default admin
// SETUP role Hierarchy:
// DEFAULT_ADMIN_ROLE &amp;gt; USER_ROLE &amp;gt; INTERN_ROLE &amp;gt; no role
_setRoleAdmin(USER_ROLE, DEFAULT_ADMIN_ROLE);
_setRoleAdmin(INTERN_ROLE, USER_ROLE);
}
// Create a bool check to see if a account address has the role admin
function isAdmin(address account) public virtual view returns(bool)
{
return hasRole(DEFAULT_ADMIN_ROLE, account);
}
// Create a modifier that can be used in other contract to make a pre-check
// That makes sure that the sender of the transaction (msg.sender) is a admin
modifier onlyAdmin() {
require(isAdmin(msg.sender), &amp;quot;Restricted to admins.&amp;quot;);
_;
}
// Add a user address as a admin
function addAdmin(address account) public virtual onlyAdmin
{
grantRole(DEFAULT_ADMIN_ROLE, account);
}
&lt;/code>&lt;/pre>
&lt;p>We just made the checks for the admin, but now you can create a check for all the other roles using the same logic.&lt;/p>
&lt;p>So how can I use this contract? Very simple, we would extend the RoleControl contract (&lt;code>contract X is RoleControl&lt;/code>). Then we you have a method that you want to protect just add the modifier like this:&lt;/p>
&lt;pre>&lt;code class="language-javascript">
// Only a account with admin role can access this
function createNFT(address receiver, string memory uri) public onlyAdmin returns (uint256)
{
&lt;/code>&lt;/pre>
&lt;h4 id="implement-the-nft-contract">Implement the NFT contract&lt;/h4>
&lt;p>Now that we have the tools to secure our NFT, lets create it.&lt;/p>
&lt;p>Edit the &lt;em>ConcertNFT.sol&lt;/em> contract:&lt;/p>
&lt;pre>&lt;code class="language-javascript">
// SPDX-License-Identifier: GPL3
pragma solidity ^0.8.0;
// implements the ERC721 standard
import &amp;quot;@openzeppelin/contracts/token/ERC721/ERC721.sol&amp;quot;;
import &amp;quot;@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol&amp;quot;;
import &amp;quot;@openzeppelin/contracts/utils/Counters.sol&amp;quot;;
// Logs are usefull
import &amp;quot;hardhat/console.sol&amp;quot;;
// Use the previous contract
import &amp;quot;./RoleControl.sol&amp;quot;;
contract ConcertNFT is ERC721, ERC721URIStorage, RoleControl {
using Counters for Counters.Counter;
Counters.Counter private _tokenIds;
// events can be emitted, and used/read in unit tests
// ideal to know what is happening
event MintedWithRole(
address from,
address to,
uint256 tokenId,
string tokenURI,
bool isAdmin
);
constructor() ERC721(&amp;quot;ConcertNFT&amp;quot;, &amp;quot;NFT&amp;quot;) RoleControl(msg.sender) {
console.log(&amp;quot;Constructor: ConcertNFT created&amp;quot;);
}
// Method that a NFT can be minted/Created from this contract
function createNFT(address receiver, string memory uri) public
onlyAdmin // only the admin
returns (uint256)
{
_tokenIds.increment();
uint256 newItemId = _tokenIds.current();
_mint(receiver, newItemId);
_setTokenURI(newItemId, uri); // uri is the file URI that can be seen in the market
emit MintedWithRole(msg.sender, receiver, newItemId, uri, isAdmin(msg.sender));
// returns the id for the newly created token
return newItemId;
}
&lt;/code>&lt;/pre>
&lt;p>Now we can use this contract, first we deploy this contract (&lt;a href="https://github.com/JoseRodrigues443/ownable-nft-contract-solidity/blob/main/scripts/deploy_ownable.ts" target="_blank" rel="noopener">deploy example here&lt;/a>) and then we can call the mint method of that contract address (&lt;a href="https://github.com/JoseRodrigues443/ownable-nft-contract-solidity/blob/main/scripts/mint.js" target="_blank" rel="noopener">you can see how to do it here&lt;/a>).&lt;/p>
&lt;h2 id="how-do-how-i-know-it-works-testing-to-the-rescue">How do how I know it works? Testing to the rescue&lt;/h2>
&lt;p>One of the difficulties of blockchain implementation is that after deploying a contract its code is on the blockchain for ever&amp;hellip; So if you are going to do it, do it right a patch is not easy.&lt;/p>
&lt;p>Of course there are solutions to this problem, for example using &lt;a href="https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies" target="_blank" rel="noopener">Proxy Patters&lt;/a> that allow the community to call the new versions.&lt;/p>
&lt;p>Still the best way to avoid problems are with solid test batteries, that allows the developer to make sure that the contract does what is expected without problematic and dangerous edge cases.&lt;/p>
&lt;p>What cases we want to test in this case?&lt;/p>
&lt;p>We want to test all &lt;code>RoleControl.sol&lt;/code> feature like:&lt;/p>
&lt;ul>
&lt;li>Add/Remove role
&lt;ul>
&lt;li>Does the caller haves permissions to make the call?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IsAdmin/IsUser()
&lt;ul>
&lt;li>Does it protect methods with success?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>We can do this tests using the &lt;a href="https://www.chaijs.com/" target="_blank" rel="noopener">Chai.js&lt;/a> library, that integrates greatly with the &lt;a href="https://hardhat.org/tutorial/testing-contracts.html" target="_blank" rel="noopener">HardHat testing plugin.&lt;/a>&lt;/p>
&lt;h3 id="lets-test">Lets test&lt;/h3>
&lt;ol>
&lt;li>Create the test file &lt;code>touch test/roleControl.ts&lt;/code>&lt;/li>
&lt;li>Setup the test env&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-typescript">
import { SignerWithAddress } from &amp;quot;@nomiclabs/hardhat-ethers/signers&amp;quot;;
import { expect } from &amp;quot;chai&amp;quot;;
import { ethers } from &amp;quot;hardhat&amp;quot;;
describe(&amp;quot;RoleControl&amp;quot;, () =&amp;gt; {
let deployedContract: any;
// Simulated accounts
let owner: SignerWithAddress;
let addr1: SignerWithAddress;
let addr2: SignerWithAddress;
let addr3: SignerWithAddress;
// Setup the base env
beforeEach(async function () {
// Deploy the contract
const Contract = await ethers.getContractFactory(&amp;quot;RoleControl&amp;quot;);
[owner, addr1, addr2, addr3] = await ethers.getSigners();
deployedContract = await Contract.deploy(owner.address);
await deployedContract.deployed();
});
&lt;/code>&lt;/pre>
&lt;p>Then we can have multiple test cases, for example the owner of the contract should be the admin, because in the constructor we do &lt;code>_setupRole(DEFAULT_ADMIN_ROLE, root);&lt;/code>. To test that case we can do:&lt;/p>
&lt;pre>&lt;code class="language-typescript">
it(&amp;quot;Owner should be admin&amp;quot;, async () =&amp;gt; {
// after deploy the owner should be a admin
expect(await deployedContract.isAdmin(owner.address)).to.be.equal(true);
// and not a user
expect(await deployedContract.isUser(owner.address)).to.be.equal(false);
});
// we can also check another user that is not the owner:
it(&amp;quot;Other user should not be admin&amp;quot;, async () =&amp;gt; {
// addr1 is a random user that did not interacted with the deployment
expect(await deployedContract.isAdmin(addr1.address)).to.be.equal(false);
// he also is not registered as a user role
expect(await deployedContract.isUser(addr1.address)).to.be.equal(false);
});
&lt;/code>&lt;/pre>
&lt;h2 id="concluding">Concluding&lt;/h2>
&lt;p>Creating a smart contract allows for powerful interactions, however they can have have dangerous repercussions to an entire project. We this type of strategies we can better protect and control the usage of our dApps.&lt;/p>
&lt;p>Hope this post helped, feel free to see the final product in my &lt;a href="https://github.com/JoseRodrigues443/ownable-nft-contract-solidity" target="_blank" rel="noopener">Github JoseRodrigues443/ownable-nft-contract&lt;/a> and contact me using my page at &lt;a href="https://joserodrigues443.github.io/#home" target="_blank" rel="noopener">JoseRodrigues443.github.io&lt;/a>&lt;/p>
&lt;h3 id="did-you-find-this-page-helpful-consider-sharing-it-">Did you find this page helpful? Consider sharing it ð&lt;/h3></description></item><item><title>GoChain</title><link>https://joserodrigues443.github.io/project/gochain/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/gochain/</guid><description/></item><item><title>IPFS Blogger implementation</title><link>https://joserodrigues443.github.io/project/blogger-ipfs/</link><pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/blogger-ipfs/</guid><description/></item><item><title>Slides</title><link>https://joserodrigues443.github.io/slides/example/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/slides/example/</guid><description>&lt;h1 id="create-slides-in-markdown-with-wowchemy">Create slides in Markdown with Wowchemy&lt;/h1>
&lt;p>&lt;a href="https://wowchemy.com/" target="_blank" rel="noopener">Wowchemy&lt;/a> | &lt;a href="https://owchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>Efficiently write slides in Markdown&lt;/li>
&lt;li>3-in-1: Create, Present, and Publish your slides&lt;/li>
&lt;li>Supports speaker notes&lt;/li>
&lt;li>Mobile friendly slides&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;ul>
&lt;li>Next: &lt;code>Right Arrow&lt;/code> or &lt;code>Space&lt;/code>&lt;/li>
&lt;li>Previous: &lt;code>Left Arrow&lt;/code>&lt;/li>
&lt;li>Start: &lt;code>Home&lt;/code>&lt;/li>
&lt;li>Finish: &lt;code>End&lt;/code>&lt;/li>
&lt;li>Overview: &lt;code>Esc&lt;/code>&lt;/li>
&lt;li>Speaker notes: &lt;code>S&lt;/code>&lt;/li>
&lt;li>Fullscreen: &lt;code>F&lt;/code>&lt;/li>
&lt;li>Zoom: &lt;code>Alt + Click&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/hakimel/reveal.js#pdf-export" target="_blank" rel="noopener">PDF Export&lt;/a>: &lt;code>E&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="code-highlighting">Code Highlighting&lt;/h2>
&lt;p>Inline code: &lt;code>variable&lt;/code>&lt;/p>
&lt;p>Code block:&lt;/p>
&lt;pre>&lt;code class="language-python">porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
print(&amp;quot;Eating...&amp;quot;)
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="math">Math&lt;/h2>
&lt;p>In-line math: $x + y = z$&lt;/p>
&lt;p>Block math:&lt;/p>
&lt;p>$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p>
&lt;hr>
&lt;h2 id="fragments">Fragments&lt;/h2>
&lt;p>Make content appear incrementally&lt;/p>
&lt;pre>&lt;code>{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code>&lt;/pre>
&lt;p>Press &lt;code>Space&lt;/code> to play!&lt;/p>
&lt;span class="fragment " >
One
&lt;/span>
&lt;span class="fragment " >
**Two**
&lt;/span>
&lt;span class="fragment " >
Three
&lt;/span>
&lt;hr>
&lt;p>A fragment can accept two optional parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>: use a custom style (requires definition in custom CSS)&lt;/li>
&lt;li>&lt;code>weight&lt;/code>: sets the order in which a fragment appears&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="speaker-notes">Speaker Notes&lt;/h2>
&lt;p>Add speaker notes to your presentation&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code>&lt;/pre>
&lt;p>Press the &lt;code>S&lt;/code> key to view the speaker notes!&lt;/p>
&lt;aside class="notes">
&lt;ul>
&lt;li>Only the speaker can read these notes&lt;/li>
&lt;li>Press &lt;code>S&lt;/code> key to view&lt;/li>
&lt;/ul>
&lt;/aside>
&lt;hr>
&lt;h2 id="themes">Themes&lt;/h2>
&lt;ul>
&lt;li>black: Black background, white text, blue links (default)&lt;/li>
&lt;li>white: White background, black text, blue links&lt;/li>
&lt;li>league: Gray background, white text, blue links&lt;/li>
&lt;li>beige: Beige background, dark text, brown links&lt;/li>
&lt;li>sky: Blue background, thin dark text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>night: Black background, thick white text, orange links&lt;/li>
&lt;li>serif: Cappuccino background, gray text, brown links&lt;/li>
&lt;li>simple: White background, black text, blue links&lt;/li>
&lt;li>solarized: Cream-colored background, dark green text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-noprocess data-shortcode-slide
data-background-image="/media/boards.jpg"
>
&lt;h2 id="custom-slide">Custom Slide&lt;/h2>
&lt;p>Customize the slide style and background&lt;/p>
&lt;pre>&lt;code class="language-markdown">{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="custom-css-example">Custom CSS Example&lt;/h2>
&lt;p>Let&amp;rsquo;s make headers navy colored.&lt;/p>
&lt;p>Create &lt;code>assets/css/reveal_custom.css&lt;/code> with:&lt;/p>
&lt;pre>&lt;code class="language-css">.reveal section h1,
.reveal section h2,
.reveal section h3 {
color: navy;
}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h1 id="questions">Questions?&lt;/h1>
&lt;p>&lt;a href="https://github.com/wowchemy/wowchemy-hugo-modules/discussions" target="_blank" rel="noopener">Ask&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p></description></item><item><title>BlockedIn</title><link>https://joserodrigues443.github.io/project/blockedin/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/blockedin/</guid><description/></item><item><title/><link>https://joserodrigues443.github.io/admin/config.yml</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/admin/config.yml</guid><description/></item><item><title>A Todo API built in flask and postgres</title><link>https://joserodrigues443.github.io/project/todo-flask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/todo-flask/</guid><description/></item><item><title>Deploy your Markdown posts to multiple sources</title><link>https://joserodrigues443.github.io/project/blog-post-deployer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/blog-post-deployer/</guid><description/></item><item><title>Electron based PlantUml Viewer</title><link>https://joserodrigues443.github.io/project/plantuml-viewer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/plantuml-viewer/</guid><description/></item><item><title>NFT Contract with Access Control</title><link>https://joserodrigues443.github.io/project/ownable-nft-contract/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/ownable-nft-contract/</guid><description/></item><item><title>Simple Golang Rest Client blueprint</title><link>https://joserodrigues443.github.io/project/go-rest-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/go-rest-client/</guid><description/></item><item><title>Telegram Bot that sends cute puppies!!!</title><link>https://joserodrigues443.github.io/project/telegram-bot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://joserodrigues443.github.io/project/telegram-bot/</guid><description/></item></channel></rss>