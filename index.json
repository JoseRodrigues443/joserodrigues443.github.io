[{"authors":null,"categories":null,"content":"Im a computer engineer that have worked in multiple areas, and now focused on providing companies new features and flows on the best way for them to succeed.\nDownload my resumé.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1658401688,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Im a computer engineer that have worked in multiple areas, and now focused on providing companies new features and flows on the best way for them to succeed.\nDownload my resumé.","tags":null,"title":"Miguel Rodrigues","type":"authors"},{"authors":null,"categories":null,"content":"","date":1642118400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"4a3e45eba7a0c711a03154adf01be5fe","permalink":"https://joserodrigues443.github.io/project/rust-idea/","publishdate":"2022-01-14T00:00:00Z","relpermalink":"/project/rust-idea/","section":"project","summary":"A Rust based API for posting ideas for the community to rate.","tags":["rust","api","postgres","web","dev","development","tooling"],"title":"Idea Api in Rust","type":"project"},{"authors":null,"categories":["Blog","DevTools"],"content":"This page uses Hugo, and Academic and is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you’ll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.toml file.\n```python import pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() ``` renders as\nimport pandas as pd data = pd.read_csv(\u0026#34;data.csv\u0026#34;) data.head() GitHub gist By doing {{\\\u0026lt; gist USER GIST_ID \\\u0026gt;}}we can show a given gist.\nIt would render like:\nCharts Academic supports the popular Plotly chart format.\nSave your Plotly JSON in your page folder, for example chart.json, and then add the {{\u0026lt; chart data=\u0026#34;chart\u0026#34; \u0026gt;}} shortcode where you would like the chart to appear.\nDemo:\nYou might also find the Plotly JSON Editor useful.\nMath Academic supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.toml file.\nExample inline math $\\nabla F(\\mathbf{x}_{n})$ renders as $\\nabla F(\\mathbf{x}_{n})$.\nDiagrams Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] ``` renders as\ngraph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] An example sequence diagram:\n```mermaid sequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! ``` renders as\nsequenceDiagram Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! An example Gantt diagram:\n```mermaid gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d ``` renders as\ngantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d An example class diagram:\n```mermaid classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } ``` renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } An example state diagram:\n```mermaid stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] ``` renders as\nstateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] Todo lists You can even write your todo lists in Academic too:\n- [x] Write math example - [x] Write diagram example - [ ] Do something else renders as\nWrite math example Write diagram example Do something else Tables Represent your data in tables:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | renders as\nFirst Header Second Header Content Cell Content Cell Content Cell Content Cell Callouts Academic supports a shortcode for callouts, also referred to as asides, hints, or alerts. By wrapping a paragraph in {{% callout note %}} ... {{% /callout %}}, it will render as an aside.\n{{% callout note %}} A Markdown aside is useful for displaying notices, hints, or definitions to your readers. {{% /callout %}} renders as\nA Markdown aside is useful for displaying notices, hints, or definitions to your readers. Spoilers Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.\n{{\u0026lt; spoiler text=\u0026#34;Click to view the spoiler\u0026#34; \u0026gt;}} You found me! {{\u0026lt; /spoiler \u0026gt;}} renders as\nClick to view the spoiler You found me!\nIcons Academic enables you to use a wide range of icons from Font Awesome and Academicons in addition to emojis.\nHere are …","date":1641945600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"https://joserodrigues443.github.io/post/writing-technical-content/","publishdate":"2022-01-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Understand how to implement technical documents in Hugo :construction_worker:.","tags":["mermaid.js","diagrams","markdown","documentation","hugo.io"],"title":"How to write technical documents in Hugo","type":"post"},{"authors":["Miguel Rodrigues"],"categories":["Blog","DevTools"],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to Hugo!\u0026#34;) Welcome to Hugo! Install Python and JupyterLab Install Anaconda which includes Python 3 and JupyterLab.\nAlternatively, install JupyterLab with pip3 install jupyterlab.\nCreate or upload a Jupyter notebook Run the following commands in your Terminal, substituting \u0026lt;MY-WEBSITE-FOLDER\u0026gt; and \u0026lt;SHORT-POST-TITLE\u0026gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:\nmkdir -p \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ cd \u0026lt;MY-WEBSITE-FOLDER\u0026gt;/content/post/\u0026lt;SHORT-POST-TITLE\u0026gt;/ jupyter lab index.ipynb The jupyter command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.\nEdit your post metadata The first cell of your Jupyter notebook will contain your post metadata (front matter).\nIn Jupyter, choose Markdown as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:\n--- title: My post\u0026#39;s title date: 2019-09-01 # Put any other Academic metadata here... --- Edit the metadata of your post, using the documentation as a guide to the available options.\nTo set a featured image, place an image named featured into your post’s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\nConvert notebook to Markdown jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=. Example This post was created with Jupyter. The original files can be found at https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter\n","date":1641340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://joserodrigues443.github.io/post/jupyter/","publishdate":"2022-01-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Hugo using Jupyter notebooks :pen:.","tags":["jupiter","notebook","data","python","graphs"],"title":"Display Jupyter Notebooks with Hugo","type":"post"},{"authors":["Miguel Rodrigues"],"categories":["Blockchain"],"content":"Introduction Introduction First… What is a NFT? How can I create and use a NFT? Why should I secure it? Show me the code man Requirements Create a base project Create the contracts Implement Role Access System Implement the NFT contract How do how I know it works? Testing to the rescue Lets test Concluding License This post provides the notion on how to create a NFT that can be deployed and used on multiple blockchain networks by multiple people, but at the same time add a security feature that makes sure that only authorized personal can use the complex features of the NFT.\nFirst… What is a NFT? A NFT is a Non-fungible token, so its a representation that something that is unique on the blockchain. They can be owned by someone, and no one can alter that ownership without permission (or a transfer).\nIt can be anything:\na image a video a concert ticket any legal document that can be signed a deed for a house How can I create and use a NFT? To first create and use a NFT we need have a base contract, a contract is the set of rules, data store and implementation of the logic that we want to have in our program.\nWhy should I secure it? It really depends on the objective of your Contract, if you want a Contract that the community can use freely, don’t secure it.\nBut imagine that you are a artist, and you have a concert or a gig in the next months. You can sell tickets as unique tokens (NFT’s) that after the event are collectible’s that can be so so valuable in the future. If the contract is not secure everyone can create your concert NFT, those fakes in the market will decrease how valuable and useful your Tokens are.\nSo how can you secure your NFT’s? You can create your own security implementation, for example a whitelist where only the users in that whitelist can access the contract features. In the following image you can see how it would work.\nThe advantage of this implementation is its simplicity, for example you create a list of allowed addresses (user addresses in the blockchain) like this: mapping(address =\u0026gt; bool) whitelist;. Then you check if the sender of the request is in the whitelist, like this require(whitelist[msg.sender]);, if the message sender is in the required check does not fail and the transaction is possible.\nBut there is a problem with this “simple” solution… First everyone has the same access in this whitelist, the artist has the same access as the intern, if we want to have different access level’s then a role based system would need to be implemented\nShow me the code man You can see the entire project this repository 🔥 JoseRodrigues443/ownable-nft-contract-solidity 🔥, but we are going to analyse it step by step.\nRequirements NodeJS (setup instruction’s here) Hardhat tooling (setup instruction’s here) Create a base project There are multiple projects and tools that allow use to compile contracts in solidity, to deploy the contracts and create unit tests that allow us to make sure everything is fine… Today we are going to use HardHat.\n# Setup basic npm project mkdir project cd project npm init npm install --save-dev hardhat # Start project, select the typescript option for a type safe language (we are not savages) npx hardhat Create the contracts # Contract that haves and manages a user and admin Role touch contracts/RoleControl.sol # the ERC 721 contract that uses the *RoleControl* contract access control logic touch contracts/ConcertNFT.sol Implement Role Access System We could create our own access control system… But lets be honest, would that be safe or practical? Because of that we are going a fully tested and community supported contract called AccessControl.sol from OpenZeppelin.\nIn solidity we can call the Github solidity file directly, but the link can break in the future, is better to install it locally using npm install @openzeppelin/contracts.\nEdit the RoleControl.sol contract:\n// SPDX-License-Identifier: GPL3 \u0026lt;-- ADD YOUR LICENSE HERE (MIT; GPL3; etc) // The version of the Solidity language to use pragma solidity ^0.8.0; // Import the OpenZeppelin AccessControl contract import \u0026#34;@openzeppelin/contracts/access/AccessControl.sol\u0026#34;; // create a contract that extends the OpenZeppelin AccessControl contract contract RoleControl is AccessControl { // We can create as many roles as we want // We use keccak256 to create a hash that identifies this constant in the contract bytes32 public constant USER_ROLE = keccak256(\u0026#34;USER\u0026#34;); // hash a USER as a role constant bytes32 public constant INTERN_ROLE = keccak256(\u0026#34;INTERN\u0026#34;); // hash a INTERN as a role constant // Constructor of the RoleControl contract constructor (address root) { // NOTE: Other DEFAULT_ADMIN\u0026#39;s can remove other admins, give this role with great care _setupRole(DEFAULT_ADMIN_ROLE, root); // The creator of the contract is the default admin // SETUP role Hierarchy: // DEFAULT_ADMIN_ROLE \u0026gt; USER_ROLE \u0026gt; INTERN_ROLE \u0026gt; no role _setRoleAdmin(USER_ROLE, DEFAULT_ADMIN_ROLE); _setRoleAdmin(INTERN_ROLE, USER_ROLE); } // Create a bool check …","date":1629158400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"ef9cfefae4a1bb905311eea5573ca60b","permalink":"https://joserodrigues443.github.io/post/nft-with-access-control/","publishdate":"2021-08-17T00:00:00Z","relpermalink":"/post/nft-with-access-control/","section":"post","summary":"Understand how to implement and test secure usage on a contract :rocket:.","tags":["decentralized","blockchain","solidity","web3","react","erc721","hardhat"],"title":"Access control on a NFT Solidity Contract","type":"post"},{"authors":null,"categories":null,"content":"","date":1556323200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"2b2fe0732f1eff61ab6dc506ae21503a","permalink":"https://joserodrigues443.github.io/project/gochain/","publishdate":"2019-04-27T00:00:00Z","relpermalink":"/project/gochain/","section":"project","summary":"A blockchain implementation in golang.","tags":["blockchain","golang","go","POW","POS"],"title":"GoChain","type":"project"},{"authors":null,"categories":null,"content":"","date":1556323200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"78c1ea2e3c0013324339fee0de1a4ccd","permalink":"https://joserodrigues443.github.io/project/blogger-ipfs/","publishdate":"2019-04-27T00:00:00Z","relpermalink":"/project/blogger-ipfs/","section":"project","summary":"Use IPFS as a source for blog posts with a static site generator.","tags":["blockchain","nextjs","markdown","ipfs"],"title":"IPFS Blogger implementation","type":"project"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne **Two** Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://joserodrigues443.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"274aa4df2b9c32ad81091d273a76669d","permalink":"https://joserodrigues443.github.io/project/blockedin/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/blockedin/","section":"project","summary":"A Decentralized professional networking and career development social media app built with Web3 technologies.","tags":["blockchain","solidity","web3","react","erc721","hardhat"],"title":"BlockedIn","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://joserodrigues443.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"c63327da945fc4ba98d0b2238499b26a","permalink":"https://joserodrigues443.github.io/project/todo-flask/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/todo-flask/","section":"project","summary":"Todo API built in flask and postgres with pipeline implementation","tags":["web","python","flask","docker"],"title":"A Todo API built in flask and postgres","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1662633347,"objectID":"6401dc871e694730f7dfe7ccea97adc0","permalink":"https://joserodrigues443.github.io/project/typescript-template/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/typescript-template/","section":"project","summary":"Full CI, Code coverage, developer productivity tools like git hooks and standard commit messages","tags":["tooling","typescript","npm","http","rest","client","web"],"title":"A Typescript project blueprint","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"47f9e444e1ddeb2a49202c8711ba1b99","permalink":"https://joserodrigues443.github.io/project/blog-post-deployer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/blog-post-deployer/","section":"project","summary":"Deploy markdown to Dev.to, Medium and others","tags":["tooling","node","typescript","telegram"],"title":"Deploy your Markdown posts to multiple sources","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"ab820a11dbd39320fd90021da0ac95c4","permalink":"https://joserodrigues443.github.io/project/plantuml-viewer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/plantuml-viewer/","section":"project","summary":"Electron based PlantUml Viewer","tags":["tooling","node","electron","typescript"],"title":"Electron based PlantUml Viewer","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"70797295c8f998a041381fe97fd5d3d3","permalink":"https://joserodrigues443.github.io/project/ownable-nft-contract/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/ownable-nft-contract/","section":"project","summary":"A NFT contract that only trusted people can use, with the OpenZeppelin Access Control Mechanism","tags":["blockchain","solidity","web3","react","erc721","hardhat"],"title":"NFT Contract with Access Control","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"b1c4f1b44896530c99ba4081c3333ddb","permalink":"https://joserodrigues443.github.io/project/go-rest-client/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/go-rest-client/","section":"project","summary":"A sample of a rest client library in golang.","tags":["tooling","go","golang","http","rest","client","web"],"title":"Simple Golang Rest Client blueprint","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1650340860,"objectID":"77f0ba8d5c0f160193e0b8f6e2aa03a6","permalink":"https://joserodrigues443.github.io/project/telegram-bot/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/telegram-bot/","section":"project","summary":"A telegram bot that sends puppy images to a telegram user and channel.","tags":["tooling","node","typescript","telegram"],"title":"Telegram Bot that sends cute puppies!!!","type":"project"}]